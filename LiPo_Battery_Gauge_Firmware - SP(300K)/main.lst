   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	system_sleep
  12               	system_sleep:
  13               	.LFB6:
  14               		.file 1 "setup.c"
   1:setup.c       **** /*
   2:setup.c       ****  LiPo Battery Gauge
   3:setup.c       ****  Version: 1.2
   4:setup.c       ****  Author: Alex from insideGadgets (http://www.insidegadgets.com)
   5:setup.c       ****  Created: 13/10/2019
   6:setup.c       ****  Last Modified: 1/11/2019
   7:setup.c       **** 
   8:setup.c       ****  */
   9:setup.c       ****  
  10:setup.c       **** #ifndef cbi
  11:setup.c       **** #define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
  12:setup.c       **** #endif
  13:setup.c       **** #ifndef sbi
  14:setup.c       **** #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
  15:setup.c       **** #endif
  16:setup.c       **** 
  17:setup.c       **** #ifndef NULL
  18:setup.c       **** #define NULL ((void *)0)
  19:setup.c       **** #endif
  20:setup.c       **** 
  21:setup.c       **** #define LOW 0
  22:setup.c       **** #define HIGH 1
  23:setup.c       **** #define false 0
  24:setup.c       **** #define true 1
  25:setup.c       **** 
  26:setup.c       **** // Watchdog timeouts to values
  27:setup.c       **** #define T16MS 0
  28:setup.c       **** #define T32MS 1
  29:setup.c       **** #define T64MS 2
  30:setup.c       **** #define T128MS 3
  31:setup.c       **** #define T250MS 4
  32:setup.c       **** #define T500MS 5
  33:setup.c       **** #define T1S 6
  34:setup.c       **** #define T2S 7
  35:setup.c       **** #define T4S 8
  36:setup.c       **** #define T8S 9
  37:setup.c       **** 
  38:setup.c       **** #define POWER_ON_PIN PD4
  39:setup.c       **** #define batteryADCPin 3
  40:setup.c       **** #define LED1 PD0
  41:setup.c       **** #define LED2 PD1
  42:setup.c       **** #define LED3 PD2
  43:setup.c       **** #define LED4 PD3
  44:setup.c       **** #define LED5 PB7
  45:setup.c       **** #define LED6 PD5
  46:setup.c       **** #define LED7 PD6
  47:setup.c       **** #define LED8 PD7
  48:setup.c       **** #define LED9 PB0
  49:setup.c       **** #define LED10 PB1
  50:setup.c       **** 
  51:setup.c       **** // ADC Refs
  52:setup.c       **** #define REF_1_1V 0
  53:setup.c       **** #define REF_AVCC 1
  54:setup.c       **** 
  55:setup.c       **** #define DELAY_TIME 50
  56:setup.c       **** 
  57:setup.c       **** // Sleep
  58:setup.c       **** void system_sleep(void) {
  15               		.loc 1 58 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  59:setup.c       **** 	set_sleep_mode(SLEEP_MODE_PWR_DOWN); // Set sleep mode
  21               		.loc 1 59 0
  22 0000 83B7      		in r24,0x33
  23 0002 897F      		andi r24,lo8(-7)
  24 0004 8460      		ori r24,lo8(4)
  25 0006 83BF      		out 0x33,r24
  60:setup.c       **** 	sleep_mode(); // System sleeps here
  26               		.loc 1 60 0
  27 0008 83B7      		in r24,0x33
  28 000a 8160      		ori r24,lo8(1)
  29 000c 83BF      		out 0x33,r24
  30               	/* #APP */
  31               	 ;  60 "setup.c" 1
  32 000e 8895      		sleep
  33               		
  34               	 ;  0 "" 2
  35               	/* #NOAPP */
  36 0010 83B7      		in r24,0x33
  37 0012 8E7F      		andi r24,lo8(-2)
  38 0014 83BF      		out 0x33,r24
  39 0016 0895      		ret
  40               		.cfi_endproc
  41               	.LFE6:
  43               	.global	setup_watchdog
  45               	setup_watchdog:
  46               	.LFB7:
  61:setup.c       **** }
  62:setup.c       **** 
  63:setup.c       **** // Setup watchdog timed sequence
  64:setup.c       **** void setup_watchdog(uint8_t wdDelay) {
  47               		.loc 1 64 0
  48               		.cfi_startproc
  49               	.LVL0:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  54 0018 8A30      		cpi r24,lo8(10)
  55 001a 00F0      		brlo .L3
  56 001c 89E0      		ldi r24,lo8(9)
  57               	.LVL1:
  58               	.L3:
  65:setup.c       **** 	if (wdDelay > 9) { 
  66:setup.c       **** 		wdDelay = 9;
  67:setup.c       **** 	}
  68:setup.c       **** 	
  69:setup.c       **** 	uint8_t bb = wdDelay & 7;
  59               		.loc 1 69 0
  60 001e 982F      		mov r25,r24
  61 0020 9770      		andi r25,lo8(7)
  62               	.LVL2:
  70:setup.c       **** 	if (wdDelay > 7) { 
  63               		.loc 1 70 0
  64 0022 8830      		cpi r24,lo8(8)
  65 0024 00F0      		brlo .L4
  71:setup.c       **** 		bb |= (1<<5);
  66               		.loc 1 71 0
  67 0026 9062      		ori r25,lo8(32)
  68               	.LVL3:
  69               	.L4:
  72:setup.c       **** 	}
  73:setup.c       **** 	
  74:setup.c       **** 	cli(); // Turn interrupts off
  70               		.loc 1 74 0
  71               	/* #APP */
  72               	 ;  74 "setup.c" 1
  73 0028 F894      		cli
  74               	 ;  0 "" 2
  75:setup.c       **** 	asm("WDR");
  75               		.loc 1 75 0
  76               	 ;  75 "setup.c" 1
  77 002a A895      		WDR
  78               	 ;  0 "" 2
  76:setup.c       **** 	
  77:setup.c       **** 	MCUSR &= ~(1<<WDRF);
  79               		.loc 1 77 0
  80               	/* #NOAPP */
  81 002c 84B7      		in r24,0x34
  82 002e 877F      		andi r24,lo8(-9)
  83 0030 84BF      		out 0x34,r24
  78:setup.c       **** 	// Start timed sequence
  79:setup.c       **** 	WDTCSR |= (1<<WDCE) | (1<<WDE);
  84               		.loc 1 79 0
  85 0032 8091 6000 		lds r24,96
  86 0036 8861      		ori r24,lo8(24)
  87 0038 8093 6000 		sts 96,r24
  80:setup.c       **** 	// Set new watchdog timeout value
  81:setup.c       **** 	WDTCSR = bb | (1<<WDIE);
  88               		.loc 1 81 0
  89 003c 9064      		ori r25,lo8(64)
  90               	.LVL4:
  91 003e 9093 6000 		sts 96,r25
  82:setup.c       **** 	
  83:setup.c       **** 	sei(); // Turn interrupts back on
  92               		.loc 1 83 0
  93               	/* #APP */
  94               	 ;  83 "setup.c" 1
  95 0042 7894      		sei
  96               	 ;  0 "" 2
  97               	/* #NOAPP */
  98 0044 0895      		ret
  99               		.cfi_endproc
 100               	.LFE7:
 102               	.global	turn_off_watchdog
 104               	turn_off_watchdog:
 105               	.LFB8:
  84:setup.c       **** }
  85:setup.c       **** 
  86:setup.c       **** // Turn off the Watchdog
  87:setup.c       **** void turn_off_watchdog(void) {
 106               		.loc 1 87 0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
  88:setup.c       **** 	cli(); // Turn interrupts off
 112               		.loc 1 88 0
 113               	/* #APP */
 114               	 ;  88 "setup.c" 1
 115 0046 F894      		cli
 116               	 ;  0 "" 2
  89:setup.c       **** 	asm("WDR");
 117               		.loc 1 89 0
 118               	 ;  89 "setup.c" 1
 119 0048 A895      		WDR
 120               	 ;  0 "" 2
  90:setup.c       **** 	MCUSR &= ~(1<<WDRF);
 121               		.loc 1 90 0
 122               	/* #NOAPP */
 123 004a 84B7      		in r24,0x34
 124 004c 877F      		andi r24,lo8(-9)
 125 004e 84BF      		out 0x34,r24
  91:setup.c       **** 	WDTCSR |= (1<<WDCE) | (1<<WDIE);
 126               		.loc 1 91 0
 127 0050 E0E6      		ldi r30,lo8(96)
 128 0052 F0E0      		ldi r31,0
 129 0054 8081      		ld r24,Z
 130 0056 8065      		ori r24,lo8(80)
 131 0058 8083      		st Z,r24
  92:setup.c       **** 	WDTCSR = 0;
 132               		.loc 1 92 0
 133 005a 1082      		st Z,__zero_reg__
  93:setup.c       **** 	sei(); // Turn interrupts back on
 134               		.loc 1 93 0
 135               	/* #APP */
 136               	 ;  93 "setup.c" 1
 137 005c 7894      		sei
 138               	 ;  0 "" 2
 139               	/* #NOAPP */
 140 005e 0895      		ret
 141               		.cfi_endproc
 142               	.LFE8:
 144               	.global	watchdog_sleep
 146               	watchdog_sleep:
 147               	.LFB9:
  94:setup.c       **** }
  95:setup.c       **** 
  96:setup.c       **** // Watchdog sleep function - setup, sleep and turn off
  97:setup.c       **** void watchdog_sleep(uint8_t timeout) { 
 148               		.loc 1 97 0
 149               		.cfi_startproc
 150               	.LVL5:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 0 */
 154               	.L__stack_usage = 0
  98:setup.c       **** 	setup_watchdog(timeout);
 155               		.loc 1 98 0
 156 0060 00D0      		rcall setup_watchdog
 157               	.LVL6:
  99:setup.c       **** 	system_sleep();
 158               		.loc 1 99 0
 159 0062 00D0      		rcall system_sleep
 160               	.LVL7:
 100:setup.c       **** 	turn_off_watchdog();
 161               		.loc 1 100 0
 162 0064 00C0      		rjmp turn_off_watchdog
 163               	.LVL8:
 164               		.cfi_endproc
 165               	.LFE9:
 167               	.global	adc_read
 169               	adc_read:
 170               	.LFB10:
 101:setup.c       **** }
 102:setup.c       **** 
 103:setup.c       **** // Read the ADC
 104:setup.c       **** int adc_read(uint8_t pin, uint8_t reference) {
 171               		.loc 1 104 0
 172               		.cfi_startproc
 173               	.LVL9:
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
 178 0066 8F70      		andi r24,lo8(15)
 179               	.LVL10:
 105:setup.c       **** 	uint8_t low, high;
 106:setup.c       **** 	
 107:setup.c       **** 	// Set the analog reference (high two bits of ADMUX) and select the channel (low 4 bits)
 108:setup.c       **** 	if (reference == REF_1_1V) {
 180               		.loc 1 108 0
 181 0068 6111      		cpse r22,__zero_reg__
 109:setup.c       **** 		ADMUX = (pin & 0x0F); // 1.1V reference
 110:setup.c       **** 	}
 111:setup.c       **** 	else {
 112:setup.c       **** 		ADMUX = (1<<REFS0) | (pin & 0x0F); // AVCC Ref
 182               		.loc 1 112 0
 183 006a 8064      		ori r24,lo8(64)
 184               	.L11:
 185 006c 8093 7C00 		sts 124,r24
 113:setup.c       **** 	}
 114:setup.c       **** 	
 115:setup.c       **** 	set_sleep_mode(SLEEP_MODE_ADC); // Set sleep mode ADC
 186               		.loc 1 115 0
 187 0070 83B7      		in r24,0x33
 188 0072 897F      		andi r24,lo8(-7)
 189 0074 8260      		ori r24,lo8(2)
 190 0076 83BF      		out 0x33,r24
 116:setup.c       **** 	sleep_mode(); // System sleeps here
 191               		.loc 1 116 0
 192 0078 83B7      		in r24,0x33
 193 007a 8160      		ori r24,lo8(1)
 194 007c 83BF      		out 0x33,r24
 195               	/* #APP */
 196               	 ;  116 "setup.c" 1
 197 007e 8895      		sleep
 198               		
 199               	 ;  0 "" 2
 200               	/* #NOAPP */
 201 0080 83B7      		in r24,0x33
 202 0082 8E7F      		andi r24,lo8(-2)
 203 0084 83BF      		out 0x33,r24
 117:setup.c       **** 	
 118:setup.c       **** 	// Read ADCL first
 119:setup.c       **** 	low = ADCL;
 204               		.loc 1 119 0
 205 0086 8091 7800 		lds r24,120
 206               	.LVL11:
 120:setup.c       **** 	high = ADCH;
 207               		.loc 1 120 0
 208 008a 2091 7900 		lds r18,121
 209               	.LVL12:
 121:setup.c       **** 	
 122:setup.c       **** 	// combine the two bytes
 123:setup.c       **** 	return (high << 8) | low;
 210               		.loc 1 123 0
 211 008e 90E0      		ldi r25,0
 124:setup.c       **** }
 212               		.loc 1 124 0
 213 0090 922B      		or r25,r18
 214 0092 0895      		ret
 215               		.cfi_endproc
 216               	.LFE10:
 218               	.global	animate_leds
 220               	animate_leds:
 221               	.LFB11:
 125:setup.c       **** 
 126:setup.c       **** // Animate LEDs at start-up
 127:setup.c       **** void animate_leds(void) {
 222               		.loc 1 127 0
 223               		.cfi_startproc
 224 0094 1F93      		push r17
 225               	.LCFI0:
 226               		.cfi_def_cfa_offset 3
 227               		.cfi_offset 17, -2
 228 0096 CF93      		push r28
 229               	.LCFI1:
 230               		.cfi_def_cfa_offset 4
 231               		.cfi_offset 28, -3
 232 0098 DF93      		push r29
 233               	.LCFI2:
 234               		.cfi_def_cfa_offset 5
 235               		.cfi_offset 29, -4
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 3 */
 239               	.L__stack_usage = 3
 240               	.LVL13:
 241               	.LBB35:
 242               	.LBB36:
 243               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 244               		.loc 2 187 0
 245 009a 87EA      		ldi r24,lo8(24999)
 246 009c 91E6      		ldi r25,hi8(24999)
 247 009e 0197      	1:	sbiw r24,1
 248 00a0 01F4      		brne 1b
 249 00a2 00C0      		rjmp .
 250 00a4 0000      		nop
 251               	.LVL14:
 252 00a6 15E0      		ldi r17,lo8(5)
 253               	.LBE36:
 254               	.LBE35:
 128:setup.c       **** 	_delay_ms(100);
 129:setup.c       **** 	
 130:setup.c       **** 	// 5 samples over 25ms
 131:setup.c       **** 	uint16_t batteryVoltageLevel = 0;
 255               		.loc 1 131 0
 256 00a8 C0E0      		ldi r28,0
 257 00aa D0E0      		ldi r29,0
 258               	.LVL15:
 259               	.L13:
 260               	.LBB37:
 132:setup.c       **** 	for (uint8_t x = 0; x < 5; x++) {
 133:setup.c       **** 		batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
 261               		.loc 1 133 0 discriminator 3
 262 00ac 60E0      		ldi r22,0
 263 00ae 83E0      		ldi r24,lo8(3)
 264 00b0 00D0      		rcall adc_read
 265               	.LVL16:
 266 00b2 C80F      		add r28,r24
 267 00b4 D91F      		adc r29,r25
 268               	.LVL17:
 269               	.LBB38:
 270               	.LBB39:
 271               		.loc 2 187 0 discriminator 3
 272 00b6 81EE      		ldi r24,lo8(1249)
 273 00b8 94E0      		ldi r25,hi8(1249)
 274 00ba 0197      	1:	sbiw r24,1
 275 00bc 01F4      		brne 1b
 276 00be 00C0      		rjmp .
 277 00c0 0000      		nop
 278               	.LVL18:
 279 00c2 1150      		subi r17,lo8(-(-1))
 280               	.LVL19:
 281               	.LBE39:
 282               	.LBE38:
 132:setup.c       **** 	for (uint8_t x = 0; x < 5; x++) {
 283               		.loc 1 132 0 discriminator 3
 284 00c4 01F4      		brne .L13
 285               	.LBE37:
 134:setup.c       **** 		_delay_ms(5);
 135:setup.c       **** 	}
 136:setup.c       **** 	batteryVoltageLevel = batteryVoltageLevel / 5;
 286               		.loc 1 136 0
 287 00c6 CE01      		movw r24,r28
 288 00c8 65E0      		ldi r22,lo8(5)
 289 00ca 70E0      		ldi r23,0
 290 00cc 00D0      		rcall __udivmodhi4
 291               	.LVL20:
 137:setup.c       **** 	
 138:setup.c       **** 	// Red
 139:setup.c       **** 	if (batteryVoltageLevel >= 750) {
 292               		.loc 1 139 0
 293 00ce 6E3E      		cpi r22,-18
 294 00d0 92E0      		ldi r25,2
 295 00d2 7907      		cpc r23,r25
 296 00d4 00F0      		brlo .L14
 140:setup.c       **** 		PORTD |= (1<<LED1);
 297               		.loc 1 140 0
 298 00d6 589A      		sbi 0xb,0
 299               	.LVL21:
 300               	.LBB40:
 301               	.LBB41:
 302               		.loc 2 187 0
 303 00d8 83ED      		ldi r24,lo8(12499)
 304 00da 90E3      		ldi r25,hi8(12499)
 305 00dc 0197      	1:	sbiw r24,1
 306 00de 01F4      		brne 1b
 307 00e0 00C0      		rjmp .
 308 00e2 0000      		nop
 309 00e4 00C0      		rjmp .L15
 310               	.LVL22:
 311               	.L14:
 312               	.LBE41:
 313               	.LBE40:
 141:setup.c       **** 		_delay_ms(DELAY_TIME);
 142:setup.c       **** 	}
 143:setup.c       **** 	if (batteryVoltageLevel >= 720) {
 314               		.loc 1 143 0
 315 00e6 603D      		cpi r22,-48
 316 00e8 92E0      		ldi r25,2
 317 00ea 7907      		cpc r23,r25
 318 00ec 00F4      		brsh .+2
 319 00ee 00C0      		rjmp .L12
 320               	.L15:
 144:setup.c       **** 		PORTD |= (1<<LED2);
 321               		.loc 1 144 0
 322 00f0 599A      		sbi 0xb,1
 323               	.LVL23:
 324               	.LBB42:
 325               	.LBB43:
 326               		.loc 2 187 0
 327 00f2 83ED      		ldi r24,lo8(12499)
 328 00f4 90E3      		ldi r25,hi8(12499)
 329 00f6 0197      	1:	sbiw r24,1
 330 00f8 01F4      		brne 1b
 331 00fa 00C0      		rjmp .
 332 00fc 0000      		nop
 333               	.LBE43:
 334               	.LBE42:
 145:setup.c       **** 		_delay_ms(DELAY_TIME);
 146:setup.c       **** 	}
 147:setup.c       **** 	if (batteryVoltageLevel >= 770) {
 335               		.loc 1 147 0
 336 00fe 6230      		cpi r22,2
 337 0100 93E0      		ldi r25,3
 338 0102 7907      		cpc r23,r25
 339 0104 00F4      		brsh .+2
 340 0106 00C0      		rjmp .L12
 148:setup.c       **** 		PORTD |= (1<<LED3);
 341               		.loc 1 148 0
 342 0108 5A9A      		sbi 0xb,2
 343               	.LVL24:
 344               	.LBB44:
 345               	.LBB45:
 346               		.loc 2 187 0
 347 010a 83ED      		ldi r24,lo8(12499)
 348 010c 90E3      		ldi r25,hi8(12499)
 349 010e 0197      	1:	sbiw r24,1
 350 0110 01F4      		brne 1b
 351 0112 00C0      		rjmp .
 352 0114 0000      		nop
 353               	.LBE45:
 354               	.LBE44:
 149:setup.c       **** 		_delay_ms(DELAY_TIME);
 150:setup.c       **** 	}
 151:setup.c       **** 	
 152:setup.c       **** 	// Blue
 153:setup.c       **** 	if (batteryVoltageLevel >= 790) {
 355               		.loc 1 153 0
 356 0116 6631      		cpi r22,22
 357 0118 93E0      		ldi r25,3
 358 011a 7907      		cpc r23,r25
 359 011c 00F4      		brsh .+2
 360 011e 00C0      		rjmp .L12
 154:setup.c       **** 		PORTD |= (1<<LED4);
 361               		.loc 1 154 0
 362 0120 5B9A      		sbi 0xb,3
 363               	.LVL25:
 364               	.LBB46:
 365               	.LBB47:
 366               		.loc 2 187 0
 367 0122 83ED      		ldi r24,lo8(12499)
 368 0124 90E3      		ldi r25,hi8(12499)
 369 0126 0197      	1:	sbiw r24,1
 370 0128 01F4      		brne 1b
 371 012a 00C0      		rjmp .
 372 012c 0000      		nop
 373               	.LBE47:
 374               	.LBE46:
 155:setup.c       **** 		_delay_ms(DELAY_TIME);
 156:setup.c       **** 	}
 157:setup.c       **** 	if (batteryVoltageLevel >= 805) {
 375               		.loc 1 157 0
 376 012e 6532      		cpi r22,37
 377 0130 93E0      		ldi r25,3
 378 0132 7907      		cpc r23,r25
 379 0134 00F0      		brlo .L12
 158:setup.c       **** 		PORTB |= (1<<LED5);
 380               		.loc 1 158 0
 381 0136 2F9A      		sbi 0x5,7
 382               	.LVL26:
 383               	.LBB48:
 384               	.LBB49:
 385               		.loc 2 187 0
 386 0138 83ED      		ldi r24,lo8(12499)
 387 013a 90E3      		ldi r25,hi8(12499)
 388 013c 0197      	1:	sbiw r24,1
 389 013e 01F4      		brne 1b
 390 0140 00C0      		rjmp .
 391 0142 0000      		nop
 392               	.LBE49:
 393               	.LBE48:
 159:setup.c       **** 		_delay_ms(DELAY_TIME);
 160:setup.c       **** 	}
 161:setup.c       **** 	if (batteryVoltageLevel >= 820) {
 394               		.loc 1 161 0
 395 0144 6433      		cpi r22,52
 396 0146 93E0      		ldi r25,3
 397 0148 7907      		cpc r23,r25
 398 014a 00F0      		brlo .L12
 162:setup.c       **** 		PORTD |= (1<<LED6);
 399               		.loc 1 162 0
 400 014c 5D9A      		sbi 0xb,5
 401               	.LVL27:
 402               	.LBB50:
 403               	.LBB51:
 404               		.loc 2 187 0
 405 014e 83ED      		ldi r24,lo8(12499)
 406 0150 90E3      		ldi r25,hi8(12499)
 407 0152 0197      	1:	sbiw r24,1
 408 0154 01F4      		brne 1b
 409 0156 00C0      		rjmp .
 410 0158 0000      		nop
 411               	.LBE51:
 412               	.LBE50:
 163:setup.c       **** 		_delay_ms(DELAY_TIME);
 164:setup.c       **** 	}
 165:setup.c       **** 	if (batteryVoltageLevel >= 850) {
 413               		.loc 1 165 0
 414 015a 6235      		cpi r22,82
 415 015c 93E0      		ldi r25,3
 416 015e 7907      		cpc r23,r25
 417 0160 00F0      		brlo .L12
 166:setup.c       **** 		PORTD |= (1<<LED7);
 418               		.loc 1 166 0
 419 0162 5E9A      		sbi 0xb,6
 420               	.LVL28:
 421               	.LBB52:
 422               	.LBB53:
 423               		.loc 2 187 0
 424 0164 83ED      		ldi r24,lo8(12499)
 425 0166 90E3      		ldi r25,hi8(12499)
 426 0168 0197      	1:	sbiw r24,1
 427 016a 01F4      		brne 1b
 428 016c 00C0      		rjmp .
 429 016e 0000      		nop
 430               	.LBE53:
 431               	.LBE52:
 167:setup.c       **** 		_delay_ms(DELAY_TIME);
 168:setup.c       **** 	}
 169:setup.c       **** 	
 170:setup.c       **** 	// Green
 171:setup.c       **** 	if (batteryVoltageLevel >= 865) {
 432               		.loc 1 171 0
 433 0170 6136      		cpi r22,97
 434 0172 93E0      		ldi r25,3
 435 0174 7907      		cpc r23,r25
 436 0176 00F0      		brlo .L12
 172:setup.c       **** 		PORTD |= (1<<LED8);
 437               		.loc 1 172 0
 438 0178 5F9A      		sbi 0xb,7
 439               	.LVL29:
 440               	.LBB54:
 441               	.LBB55:
 442               		.loc 2 187 0
 443 017a 83ED      		ldi r24,lo8(12499)
 444 017c 90E3      		ldi r25,hi8(12499)
 445 017e 0197      	1:	sbiw r24,1
 446 0180 01F4      		brne 1b
 447 0182 00C0      		rjmp .
 448 0184 0000      		nop
 449               	.LBE55:
 450               	.LBE54:
 173:setup.c       **** 		_delay_ms(DELAY_TIME);
 174:setup.c       **** 	}
 175:setup.c       **** 	if (batteryVoltageLevel >= 880) {
 451               		.loc 1 175 0
 452 0186 6037      		cpi r22,112
 453 0188 93E0      		ldi r25,3
 454 018a 7907      		cpc r23,r25
 455 018c 00F0      		brlo .L12
 176:setup.c       **** 		PORTB |= (1<<LED9);
 456               		.loc 1 176 0
 457 018e 289A      		sbi 0x5,0
 458               	.LVL30:
 459               	.LBB56:
 460               	.LBB57:
 461               		.loc 2 187 0
 462 0190 83ED      		ldi r24,lo8(12499)
 463 0192 90E3      		ldi r25,hi8(12499)
 464 0194 0197      	1:	sbiw r24,1
 465 0196 01F4      		brne 1b
 466 0198 00C0      		rjmp .
 467 019a 0000      		nop
 468               	.LBE57:
 469               	.LBE56:
 177:setup.c       **** 		_delay_ms(DELAY_TIME);
 178:setup.c       **** 	}
 179:setup.c       **** 	if (batteryVoltageLevel >= 900) {
 470               		.loc 1 179 0
 471 019c 6438      		cpi r22,-124
 472 019e 7340      		sbci r23,3
 473 01a0 00F0      		brlo .L12
 180:setup.c       **** 		PORTB |= (1<<LED10);
 474               		.loc 1 180 0
 475 01a2 299A      		sbi 0x5,1
 476               	.LVL31:
 477               	.L12:
 478               	/* epilogue start */
 181:setup.c       **** 	}
 182:setup.c       **** }
 479               		.loc 1 182 0
 480 01a4 DF91      		pop r29
 481 01a6 CF91      		pop r28
 482 01a8 1F91      		pop r17
 483               	.LVL32:
 484 01aa 0895      		ret
 485               		.cfi_endproc
 486               	.LFE11:
 488               	.global	setup
 490               	setup:
 491               	.LFB12:
 183:setup.c       **** 
 184:setup.c       **** // Setup
 185:setup.c       **** void setup(void) {
 492               		.loc 1 185 0
 493               		.cfi_startproc
 494               	/* prologue: function */
 495               	/* frame size = 0 */
 496               	/* stack size = 0 */
 497               	.L__stack_usage = 0
 186:setup.c       **** 	// Turn on pull ups
 187:setup.c       **** 	PORTB |= (1<<PB2) | (1<<PB3) | (1<<PB4) | (1<<PB5) | (1<<PB6); 
 498               		.loc 1 187 0
 499 01ac 85B1      		in r24,0x5
 500 01ae 8C67      		ori r24,lo8(124)
 501 01b0 85B9      		out 0x5,r24
 188:setup.c       **** 	PORTC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC4) | (1<<PC5) | (1<<PC6) | (1<<PC7); 
 502               		.loc 1 188 0
 503 01b2 88B1      		in r24,0x8
 504 01b4 876F      		ori r24,lo8(-9)
 505 01b6 88B9      		out 0x8,r24
 189:setup.c       **** 	
 190:setup.c       **** 	// Setup outputs
 191:setup.c       **** 	DDRD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
 506               		.loc 1 191 0
 507 01b8 8AB1      		in r24,0xa
 508 01ba 8F6E      		ori r24,lo8(-17)
 509 01bc 8AB9      		out 0xa,r24
 192:setup.c       **** 	DDRB |= (1<<LED5)  | (1<<LED9) | (1<<LED10);
 510               		.loc 1 192 0
 511 01be 84B1      		in r24,0x4
 512 01c0 8368      		ori r24,lo8(-125)
 513 01c2 84B9      		out 0x4,r24
 193:setup.c       **** 	
 194:setup.c       **** 	// Blink LEDs
 195:setup.c       **** 	//PORTD |= (1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8);
 196:setup.c       **** 	//PORTB |= (1<<LED5) | (1<<LED9) | (1<<LED10);
 197:setup.c       **** 	//_delay_ms(200);
 198:setup.c       **** 	//PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
 199:setup.c       **** 	//PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 200:setup.c       **** 	
 201:setup.c       **** 	// Set ADC prescale factor to 8
 202:setup.c       **** 	// 1 MHz / 8 = 125 KHz, inside the desired 50-200 KHz range.
 203:setup.c       **** 	sbi(ADCSRA, ADPS1);
 514               		.loc 1 203 0
 515 01c4 EAE7      		ldi r30,lo8(122)
 516 01c6 F0E0      		ldi r31,0
 517 01c8 8081      		ld r24,Z
 518 01ca 8260      		ori r24,lo8(2)
 519 01cc 8083      		st Z,r24
 204:setup.c       **** 	sbi(ADCSRA, ADPS0);
 520               		.loc 1 204 0
 521 01ce 8081      		ld r24,Z
 522 01d0 8160      		ori r24,lo8(1)
 523 01d2 8083      		st Z,r24
 205:setup.c       **** 	
 206:setup.c       **** 	// Enable ADC/interrupt
 207:setup.c       **** 	sbi(ADCSRA, ADEN);
 524               		.loc 1 207 0
 525 01d4 8081      		ld r24,Z
 526 01d6 8068      		ori r24,lo8(-128)
 527 01d8 8083      		st Z,r24
 208:setup.c       **** 	sbi(ADCSRA, ADIE);
 528               		.loc 1 208 0
 529 01da 8081      		ld r24,Z
 530 01dc 8860      		ori r24,lo8(8)
 531 01de 8083      		st Z,r24
 209:setup.c       **** 	
 210:setup.c       **** 	// Enable pin change interrupt on PD4
 211:setup.c       **** 	sbi(PCMSK2, PCINT20);
 532               		.loc 1 211 0
 533 01e0 EDE6      		ldi r30,lo8(109)
 534 01e2 F0E0      		ldi r31,0
 535 01e4 8081      		ld r24,Z
 536 01e6 8061      		ori r24,lo8(16)
 537 01e8 8083      		st Z,r24
 212:setup.c       **** 	
 213:setup.c       **** 	sei(); // Turn on interrupts
 538               		.loc 1 213 0
 539               	/* #APP */
 540               	 ;  213 "setup.c" 1
 541 01ea 7894      		sei
 542               	 ;  0 "" 2
 543               	/* #NOAPP */
 544 01ec 0895      		ret
 545               		.cfi_endproc
 546               	.LFE12:
 548               		.section	.text.startup,"ax",@progbits
 549               	.global	main
 551               	main:
 552               	.LFB13:
 553               		.file 3 "main.c"
   1:main.c        **** /*
   2:main.c        ****  LiPo Battery Gauge
   3:main.c        ****  Version: 1.2
   4:main.c        ****  Author: Alex from insideGadgets (http://www.insidegadgets.com)
   5:main.c        ****  Created: 13/10/2019
   6:main.c        ****  Last Modified: 1/11/2019
   7:main.c        ****  
   8:main.c        **** */
   9:main.c        **** 
  10:main.c        **** #define F_CPU 1000000 // 1 MHz
  11:main.c        **** 
  12:main.c        **** #include <avr/io.h>
  13:main.c        **** #include <avr/eeprom.h>
  14:main.c        **** #include <avr/interrupt.h>
  15:main.c        **** #include <util/delay.h>
  16:main.c        **** #include <avr/sleep.h>
  17:main.c        **** #include "setup.c"
  18:main.c        **** 
  19:main.c        **** int main (void) {
 554               		.loc 3 19 0
 555               		.cfi_startproc
 556               	/* prologue: function */
 557               	/* frame size = 0 */
 558               	/* stack size = 0 */
 559               	.L__stack_usage = 0
  20:main.c        **** 	setup();
 560               		.loc 3 20 0
 561 0000 00D0      		rcall setup
 562               	.LVL33:
 563               	.LBB58:
  21:main.c        **** 	
  22:main.c        **** 	while(1) {
  23:main.c        **** 		// Power pin (PD4) low, go to sleep
  24:main.c        **** 		if (!(PIND & (1<<POWER_ON_PIN))) {
  25:main.c        **** 			_delay_ms(200);
  26:main.c        **** 			
  27:main.c        **** 			// Turn off LEDs
  28:main.c        **** 			PORTD &= ~((1<<LED1) | (1<<LED2) | (1<<LED3) | (1<<LED4) | (1<<LED6) | (1<<LED7) | (1<<LED8));
  29:main.c        **** 			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
  30:main.c        **** 			
  31:main.c        **** 			// Disable ADC/interrupt
  32:main.c        **** 			cbi(ADCSRA, ADEN);
  33:main.c        **** 			cbi(ADCSRA, ADIE);
  34:main.c        **** 			
  35:main.c        **** 			// Enable pin change interrupt
  36:main.c        **** 			sbi(PCICR, PCIE2);
  37:main.c        **** 			system_sleep();
  38:main.c        **** 			
  39:main.c        **** 			// Enable ADC/interrupt
  40:main.c        **** 			sbi(ADCSRA, ADEN);
  41:main.c        **** 			sbi(ADCSRA, ADIE);
  42:main.c        **** 			
  43:main.c        **** 			// Disable pin change interrupt
  44:main.c        **** 			cbi(PCICR, PCIE2);
  45:main.c        **** 			_delay_ms(100);
  46:main.c        **** 			
  47:main.c        **** 			animate_leds(); // Animate LEDs at start
  48:main.c        **** 		}
  49:main.c        **** 		
  50:main.c        **** 		
  51:main.c        **** 		// 5 samples over 25ms
  52:main.c        **** 		uint16_t batteryVoltageLevel = 0;
  53:main.c        **** 		for (uint8_t x = 0; x < 5; x++) {
  54:main.c        **** 			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
  55:main.c        **** 			_delay_ms(5);
  56:main.c        **** 		}
  57:main.c        **** 		batteryVoltageLevel = batteryVoltageLevel / 5;
 564               		.loc 3 57 0
 565 0002 85E0      		ldi r24,lo8(5)
 566 0004 E82E      		mov r14,r24
 567 0006 F12C      		mov r15,__zero_reg__
 568               	.L50:
  24:main.c        **** 			_delay_ms(200);
 569               		.loc 3 24 0
 570 0008 4C99      		sbic 0x9,4
 571 000a 00C0      		rjmp .L28
 572               	.LVL34:
 573               	.LBB59:
 574               	.LBB60:
 575               		.loc 2 187 0
 576 000c 8FE4      		ldi r24,lo8(-15537)
 577 000e 93EC      		ldi r25,hi8(-15537)
 578 0010 0197      	1:	sbiw r24,1
 579 0012 01F4      		brne 1b
 580 0014 00C0      		rjmp .
 581 0016 0000      		nop
 582               	.LVL35:
 583               	.LBE60:
 584               	.LBE59:
  28:main.c        **** 			PORTB &= ~((1<<LED5) | (1<<LED9) | (1<<LED10));
 585               		.loc 3 28 0
 586 0018 8BB1      		in r24,0xb
 587 001a 8071      		andi r24,lo8(16)
 588 001c 8BB9      		out 0xb,r24
  29:main.c        **** 			
 589               		.loc 3 29 0
 590 001e 85B1      		in r24,0x5
 591 0020 8C77      		andi r24,lo8(124)
 592 0022 85B9      		out 0x5,r24
  32:main.c        **** 			cbi(ADCSRA, ADIE);
 593               		.loc 3 32 0
 594 0024 8091 7A00 		lds r24,122
 595 0028 8F77      		andi r24,lo8(127)
 596 002a 8093 7A00 		sts 122,r24
  33:main.c        **** 			
 597               		.loc 3 33 0
 598 002e 8091 7A00 		lds r24,122
 599 0032 877F      		andi r24,lo8(-9)
 600 0034 8093 7A00 		sts 122,r24
  36:main.c        **** 			system_sleep();
 601               		.loc 3 36 0
 602 0038 8091 6800 		lds r24,104
 603 003c 8460      		ori r24,lo8(4)
 604 003e 8093 6800 		sts 104,r24
  37:main.c        **** 			
 605               		.loc 3 37 0
 606 0042 00D0      		rcall system_sleep
 607               	.LVL36:
  40:main.c        **** 			sbi(ADCSRA, ADIE);
 608               		.loc 3 40 0
 609 0044 8091 7A00 		lds r24,122
 610 0048 8068      		ori r24,lo8(-128)
 611 004a 8093 7A00 		sts 122,r24
  41:main.c        **** 			
 612               		.loc 3 41 0
 613 004e 8091 7A00 		lds r24,122
 614 0052 8860      		ori r24,lo8(8)
 615 0054 8093 7A00 		sts 122,r24
  44:main.c        **** 			_delay_ms(100);
 616               		.loc 3 44 0
 617 0058 8091 6800 		lds r24,104
 618 005c 8B7F      		andi r24,lo8(-5)
 619 005e 8093 6800 		sts 104,r24
 620               	.LVL37:
 621               	.LBB61:
 622               	.LBB62:
 623               		.loc 2 187 0
 624 0062 87EA      		ldi r24,lo8(24999)
 625 0064 91E6      		ldi r25,hi8(24999)
 626 0066 0197      	1:	sbiw r24,1
 627 0068 01F4      		brne 1b
 628 006a 00C0      		rjmp .
 629 006c 0000      		nop
 630               	.LVL38:
 631               	.LBE62:
 632               	.LBE61:
  47:main.c        **** 		}
 633               		.loc 3 47 0
 634 006e 00D0      		rcall animate_leds
 635               	.LVL39:
 636               	.L28:
 637               	.LBE58:
  19:main.c        **** 	setup();
 638               		.loc 3 19 0 discriminator 1
 639 0070 15E0      		ldi r17,lo8(5)
 640 0072 C0E0      		ldi r28,0
 641 0074 D0E0      		ldi r29,0
 642               	.LVL40:
 643               	.L29:
 644               	.LBB66:
 645               	.LBB63:
  54:main.c        **** 			_delay_ms(5);
 646               		.loc 3 54 0 discriminator 3
 647 0076 60E0      		ldi r22,0
 648 0078 83E0      		ldi r24,lo8(3)
 649 007a 00D0      		rcall adc_read
 650               	.LVL41:
 651 007c C80F      		add r28,r24
 652 007e D91F      		adc r29,r25
 653               	.LVL42:
 654               	.LBB64:
 655               	.LBB65:
 656               		.loc 2 187 0 discriminator 3
 657 0080 81EE      		ldi r24,lo8(1249)
 658 0082 94E0      		ldi r25,hi8(1249)
 659 0084 0197      	1:	sbiw r24,1
 660 0086 01F4      		brne 1b
 661 0088 00C0      		rjmp .
 662 008a 0000      		nop
 663               	.LVL43:
 664 008c 1150      		subi r17,lo8(-(-1))
 665               	.LVL44:
 666               	.LBE65:
 667               	.LBE64:
  53:main.c        **** 			batteryVoltageLevel += adc_read(batteryADCPin, REF_1_1V);
 668               		.loc 3 53 0 discriminator 3
 669 008e 01F4      		brne .L29
 670               	.LBE63:
 671               		.loc 3 57 0
 672 0090 CE01      		movw r24,r28
 673 0092 B701      		movw r22,r14
 674 0094 00D0      		rcall __udivmodhi4
 675               	.LVL45:
  58:main.c        **** 		
  59:main.c        **** 		
  60:main.c        **** 		// Red
  61:main.c        **** 		// Low voltage cutoff on SP is 3.4v which with 300k resistor instead of recommended 320k, that tr
  62:main.c        **** 		// Set lower bound from 675 to 750?
  63:main.c        **** 		// LED2 triggers at value 720 which is too low 
  64:main.c        **** 		if (batteryVoltageLevel >= 750) {
 676               		.loc 3 64 0
 677 0096 6E3E      		cpi r22,-18
 678 0098 92E0      		ldi r25,2
 679 009a 7907      		cpc r23,r25
 680 009c 00F0      		brlo .L30
  65:main.c        **** 			PORTD |= (1<<LED1);
 681               		.loc 3 65 0
 682 009e 589A      		sbi 0xb,0
  66:main.c        **** 		}
  67:main.c        **** 		else {
  68:main.c        **** 			PORTD &= ~(1<<LED1);
  69:main.c        **** 		}
  70:main.c        **** 		if (batteryVoltageLevel >= 770) {
 683               		.loc 3 70 0
 684 00a0 6230      		cpi r22,2
 685 00a2 83E0      		ldi r24,3
 686 00a4 7807      		cpc r23,r24
 687 00a6 00F4      		brsh .L31
 688 00a8 00C0      		rjmp .L32
 689               	.L30:
  68:main.c        **** 		}
 690               		.loc 3 68 0
 691 00aa 5898      		cbi 0xb,0
 692 00ac 00C0      		rjmp .L32
 693               	.L31:
  71:main.c        **** 			PORTD |= (1<<LED2);
 694               		.loc 3 71 0
 695 00ae 599A      		sbi 0xb,1
  72:main.c        **** 		}
  73:main.c        **** 		else {
  74:main.c        **** 			PORTD &= ~(1<<LED2);
  75:main.c        **** 		}
  76:main.c        **** 		if (batteryVoltageLevel >= 790) {
 696               		.loc 3 76 0
 697 00b0 6631      		cpi r22,22
 698 00b2 93E0      		ldi r25,3
 699 00b4 7907      		cpc r23,r25
 700 00b6 00F4      		brsh .L33
 701 00b8 00C0      		rjmp .L34
 702               	.L32:
  74:main.c        **** 		}
 703               		.loc 3 74 0
 704 00ba 5998      		cbi 0xb,1
 705 00bc 00C0      		rjmp .L34
 706               	.L33:
  77:main.c        **** 			PORTD |= (1<<LED3);
 707               		.loc 3 77 0
 708 00be 5A9A      		sbi 0xb,2
  78:main.c        **** 		}
  79:main.c        **** 		else {
  80:main.c        **** 			PORTD &= ~(1<<LED3);
  81:main.c        **** 		}
  82:main.c        **** 		
  83:main.c        **** 		// Blue
  84:main.c        **** 		if (batteryVoltageLevel >= 805) {
 709               		.loc 3 84 0
 710 00c0 6532      		cpi r22,37
 711 00c2 83E0      		ldi r24,3
 712 00c4 7807      		cpc r23,r24
 713 00c6 00F4      		brsh .L35
 714 00c8 00C0      		rjmp .L36
 715               	.L34:
  80:main.c        **** 		}
 716               		.loc 3 80 0
 717 00ca 5A98      		cbi 0xb,2
 718 00cc 00C0      		rjmp .L36
 719               	.L35:
  85:main.c        **** 			PORTD |= (1<<LED4);
 720               		.loc 3 85 0
 721 00ce 5B9A      		sbi 0xb,3
  86:main.c        **** 		}
  87:main.c        **** 		else {
  88:main.c        **** 			PORTD &= ~(1<<LED4);
  89:main.c        **** 		}
  90:main.c        **** 		if (batteryVoltageLevel >= 820) {
 722               		.loc 3 90 0
 723 00d0 6433      		cpi r22,52
 724 00d2 93E0      		ldi r25,3
 725 00d4 7907      		cpc r23,r25
 726 00d6 00F4      		brsh .L37
 727 00d8 00C0      		rjmp .L38
 728               	.L36:
  88:main.c        **** 		}
 729               		.loc 3 88 0
 730 00da 5B98      		cbi 0xb,3
 731 00dc 00C0      		rjmp .L38
 732               	.L37:
  91:main.c        **** 			PORTB |= (1<<LED5);
 733               		.loc 3 91 0
 734 00de 2F9A      		sbi 0x5,7
  92:main.c        **** 		}
  93:main.c        **** 		else {
  94:main.c        **** 			PORTB &= ~(1<<LED5);
  95:main.c        **** 		}
  96:main.c        **** 		if (batteryVoltageLevel >= 835) {
 735               		.loc 3 96 0
 736 00e0 6334      		cpi r22,67
 737 00e2 83E0      		ldi r24,3
 738 00e4 7807      		cpc r23,r24
 739 00e6 00F4      		brsh .L39
 740 00e8 00C0      		rjmp .L40
 741               	.L38:
  94:main.c        **** 		}
 742               		.loc 3 94 0
 743 00ea 2F98      		cbi 0x5,7
 744 00ec 00C0      		rjmp .L40
 745               	.L39:
  97:main.c        **** 			PORTD |= (1<<LED6);
 746               		.loc 3 97 0
 747 00ee 5D9A      		sbi 0xb,5
  98:main.c        **** 		}
  99:main.c        **** 		else {
 100:main.c        **** 			PORTD &= ~(1<<LED6);
 101:main.c        **** 		}
 102:main.c        **** 		if (batteryVoltageLevel >= 850) {
 748               		.loc 3 102 0
 749 00f0 6235      		cpi r22,82
 750 00f2 93E0      		ldi r25,3
 751 00f4 7907      		cpc r23,r25
 752 00f6 00F4      		brsh .L41
 753 00f8 00C0      		rjmp .L42
 754               	.L40:
 100:main.c        **** 		}
 755               		.loc 3 100 0
 756 00fa 5D98      		cbi 0xb,5
 757 00fc 00C0      		rjmp .L42
 758               	.L41:
 103:main.c        **** 			PORTD |= (1<<LED7);
 759               		.loc 3 103 0
 760 00fe 5E9A      		sbi 0xb,6
 104:main.c        **** 		}
 105:main.c        **** 		else {
 106:main.c        **** 			PORTD &= ~(1<<LED7);
 107:main.c        **** 		}
 108:main.c        **** 		
 109:main.c        **** 		// Green
 110:main.c        **** 		if (batteryVoltageLevel >= 865) {
 761               		.loc 3 110 0
 762 0100 6136      		cpi r22,97
 763 0102 83E0      		ldi r24,3
 764 0104 7807      		cpc r23,r24
 765 0106 00F4      		brsh .L43
 766 0108 00C0      		rjmp .L44
 767               	.L42:
 106:main.c        **** 		}
 768               		.loc 3 106 0
 769 010a 5E98      		cbi 0xb,6
 770 010c 00C0      		rjmp .L44
 771               	.L43:
 111:main.c        **** 			PORTD |= (1<<LED8);
 772               		.loc 3 111 0
 773 010e 5F9A      		sbi 0xb,7
 112:main.c        **** 		}
 113:main.c        **** 		else {
 114:main.c        **** 			PORTD &= ~(1<<LED8);
 115:main.c        **** 		}
 116:main.c        **** 		if (batteryVoltageLevel >= 880) {
 774               		.loc 3 116 0
 775 0110 6037      		cpi r22,112
 776 0112 93E0      		ldi r25,3
 777 0114 7907      		cpc r23,r25
 778 0116 00F4      		brsh .L45
 779 0118 00C0      		rjmp .L46
 780               	.L44:
 114:main.c        **** 		}
 781               		.loc 3 114 0
 782 011a 5F98      		cbi 0xb,7
 783 011c 00C0      		rjmp .L46
 784               	.L45:
 117:main.c        **** 			PORTB |= (1<<LED9);
 785               		.loc 3 117 0
 786 011e 289A      		sbi 0x5,0
 118:main.c        **** 		}
 119:main.c        **** 		else {
 120:main.c        **** 			PORTB &= ~(1<<LED9);
 121:main.c        **** 		}
 122:main.c        **** 		if (batteryVoltageLevel >= 900) {
 787               		.loc 3 122 0
 788 0120 6438      		cpi r22,-124
 789 0122 7340      		sbci r23,3
 790 0124 00F0      		brlo .L48
 123:main.c        **** 			PORTB |= (1<<LED10);
 791               		.loc 3 123 0
 792 0126 299A      		sbi 0x5,1
 793 0128 00C0      		rjmp .L49
 794               	.L46:
 120:main.c        **** 		}
 795               		.loc 3 120 0
 796 012a 2898      		cbi 0x5,0
 797               	.L48:
 124:main.c        **** 		}
 125:main.c        **** 		else {
 126:main.c        **** 			PORTB &= ~(1<<LED10);
 798               		.loc 3 126 0
 799 012c 2998      		cbi 0x5,1
 800               	.L49:
 127:main.c        **** 		}
 128:main.c        **** 		// Full charge (4.2v) is between 920 and 930
 129:main.c        **** 		// Setting Full for 4.1v so gauge isn't immediately depleted one bar after a minute of use
 130:main.c        **** 		// 4.1v is between 910 and 920, setting LED10 from 930 to 915
 131:main.c        **** 		// Sleep for 1 second
 132:main.c        **** 		watchdog_sleep(T1S);
 801               		.loc 3 132 0
 802 012e 86E0      		ldi r24,lo8(6)
 803 0130 00D0      		rcall watchdog_sleep
 804               	.LVL46:
 805               	.LBE66:
 133:main.c        **** 	}
 806               		.loc 3 133 0
 807 0132 00C0      		rjmp .L50
 808               		.cfi_endproc
 809               	.LFE13:
 811               		.text
 812               	.global	__vector_16
 814               	__vector_16:
 815               	.LFB14:
 134:main.c        **** 	
 135:main.c        **** 	return 0;
 136:main.c        **** }
 137:main.c        **** 
 138:main.c        **** EMPTY_INTERRUPT(ADC_vect);
 816               		.loc 3 138 0
 817               		.cfi_startproc
 818               	/* prologue: naked */
 819               	/* frame size = 0 */
 820               	/* stack size = 0 */
 821               	.L__stack_usage = 0
 822               		.loc 3 138 0
 823               	/* #APP */
 824               	 ;  138 "main.c" 1
 825 01ee 1895      		reti
 826               	 ;  0 "" 2
 827               	/* epilogue start */
 828               	/* #NOAPP */
 829               		.cfi_endproc
 830               	.LFE14:
 832               	.global	__vector_7
 834               	__vector_7:
 835               	.LFB15:
 139:main.c        **** EMPTY_INTERRUPT(WDT_vect);
 836               		.loc 3 139 0
 837               		.cfi_startproc
 838               	/* prologue: naked */
 839               	/* frame size = 0 */
 840               	/* stack size = 0 */
 841               	.L__stack_usage = 0
 842               		.loc 3 139 0
 843               	/* #APP */
 844               	 ;  139 "main.c" 1
 845 01f0 1895      		reti
 846               	 ;  0 "" 2
 847               	/* epilogue start */
 848               	/* #NOAPP */
 849               		.cfi_endproc
 850               	.LFE15:
 852               	.global	__vector_5
 854               	__vector_5:
 855               	.LFB16:
 140:main.c        **** 
 141:main.c        **** ISR(PCINT2_vect) {
 856               		.loc 3 141 0
 857               		.cfi_startproc
 858 01f2 1F92      		push r1
 859               	.LCFI3:
 860               		.cfi_def_cfa_offset 3
 861               		.cfi_offset 1, -2
 862 01f4 0F92      		push r0
 863               	.LCFI4:
 864               		.cfi_def_cfa_offset 4
 865               		.cfi_offset 0, -3
 866 01f6 0FB6      		in r0,__SREG__
 867 01f8 0F92      		push r0
 868 01fa 1124      		clr __zero_reg__
 869 01fc 8F93      		push r24
 870               	.LCFI5:
 871               		.cfi_def_cfa_offset 5
 872               		.cfi_offset 24, -4
 873 01fe 9F93      		push r25
 874               	.LCFI6:
 875               		.cfi_def_cfa_offset 6
 876               		.cfi_offset 25, -5
 877               	/* prologue: Signal */
 878               	/* frame size = 0 */
 879               	/* stack size = 5 */
 880               	.L__stack_usage = 5
 881               	.LVL47:
 882               	.LBB67:
 883               	.LBB68:
 884               		.loc 2 187 0
 885 0200 8FE4      		ldi r24,lo8(-15537)
 886 0202 93EC      		ldi r25,hi8(-15537)
 887 0204 0197      	1:	sbiw r24,1
 888 0206 01F4      		brne 1b
 889 0208 00C0      		rjmp .
 890 020a 0000      		nop
 891               	.LVL48:
 892               	/* epilogue start */
 893               	.LBE68:
 894               	.LBE67:
 142:main.c        **** 	_delay_ms(200);
 143:main.c        **** }
 895               		.loc 3 143 0
 896 020c 9F91      		pop r25
 897 020e 8F91      		pop r24
 898 0210 0F90      		pop r0
 899 0212 0FBE      		out __SREG__,r0
 900 0214 0F90      		pop r0
 901 0216 1F90      		pop r1
 902 0218 1895      		reti
 903               		.cfi_endproc
 904               	.LFE16:
 906               	.Letext0:
 907               		.file 4 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccOJgRkS.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccOJgRkS.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccOJgRkS.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccOJgRkS.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccOJgRkS.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccOJgRkS.s:12     .text:0000000000000000 system_sleep
     /tmp/ccOJgRkS.s:45     .text:0000000000000018 setup_watchdog
     /tmp/ccOJgRkS.s:104    .text:0000000000000046 turn_off_watchdog
     /tmp/ccOJgRkS.s:146    .text:0000000000000060 watchdog_sleep
     /tmp/ccOJgRkS.s:169    .text:0000000000000066 adc_read
     /tmp/ccOJgRkS.s:220    .text:0000000000000094 animate_leds
     /tmp/ccOJgRkS.s:490    .text:00000000000001ac setup
     /tmp/ccOJgRkS.s:551    .text.startup:0000000000000000 main
     /tmp/ccOJgRkS.s:814    .text:00000000000001ee __vector_16
     /tmp/ccOJgRkS.s:834    .text:00000000000001f0 __vector_7
     /tmp/ccOJgRkS.s:854    .text:00000000000001f2 __vector_5

UNDEFINED SYMBOLS
__udivmodhi4
